version: '2'

services:
  service-registry:
    build: ./service-registry
    container_name: service-registry
    image: service-registry:latest
    restart: on-failure
    ports:
      - "8081:8081"
    environment:
      SPRING_PROFILES_ACTIVE: docker
    networks:
      my-docker-network:

  api-gateway:
    build: ./api-gateway
    container_name: api-gateway
    image: api-gateway:latest
    restart: on-failure
    depends_on:
      - service-registry
      - keycloak
    ports:
      - "8082:8082"
    environment:
      SPRING_PROFILES_ACTIVE: docker
    networks:
      my-docker-network:
        aliases:
          - bank.mydomain.nl

  bank-service:
    build: ./bank-service
    container_name: bank-service
    image: bank-service:latest
    restart: on-failure
    depends_on:
      - service-registry
    ports:
      - "8084:8084"
    environment:
      SPRING_PROFILES_ACTIVE: docker
    networks:
      my-docker-network:

  keycloak:
    container_name: keycloak
    image: quay.io/keycloak/keycloak:latest
    restart: on-failure
    env_file: ./keycloak.env
    command: start-dev --hostname="keycloak.mydomain.nl"
    depends_on:
      - keycloak_db
    ports:
      - "8080:8080"
    networks:
      my-docker-network:
        aliases:
          - keycloak.mydomain.nl

  keycloak_db:
    container_name: keycloak_db
    image: postgres
    restart: on-failure
    ports:
      - "5432:5432"
    volumes:
      - keycloak_db_volume:/var/lib/postgresql/data
    env_file:
      - ./keycloak-db.env
    networks:
      my-docker-network:

  magic:
    image: "digitsy/kafka-magic"
    ports:
      - "8087:80"
    volumes:
      - kafka_magic_config:/config
    environment:
      KMAGIC_ALLOW_TOPIC_DELETE: "true"
      KMAGIC_ALLOW_SCHEMA_DELETE: "true"
      KMAGIC_CONFIG_STORE_TYPE: "file"
      KMAGIC_CONFIG_STORE_CONNECTION: "Data Source=/config/KafkaMagicConfig.db;"
      KMAGIC_CONFIG_ENCRYPTION_KEY: "ENTER_YOUR_KEY_HERE"
    networks:
      my-docker-network:

  kafka-0:
    image: bitnami/kafka:3.5
    ports:
      - "9092"
    environment:
      # KRaft settings
      KAFKA_CFG_NODE_ID: 0
      KAFKA_CFG_PROCESS_ROLES: controller,broker
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 0@kafka-0:9093,1@kafka-1:9093,2@kafka-2:9093
      KAFKA_KRAFT_CLUSTER_ID: abcdefghijklmnopqrstuv
      # Listeners
      KAFKA_CFG_LISTENERS: PLAINTEXT://:9092,CONTROLLER://:9093
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://:9092
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: PLAINTEXT
    volumes:
      - kafka_0_data:/bitnami/kafka
    networks:
      my-docker-network:

  kafka-1:
    image: bitnami/kafka:3.5
    ports:
      - "9092"
    environment:
      # KRaft settings
      KAFKA_CFG_NODE_ID: 1
      KAFKA_CFG_PROCESS_ROLES: controller,broker
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 0@kafka-0:9093,1@kafka-1:9093,2@kafka-2:9093
      KAFKA_KRAFT_CLUSTER_ID: abcdefghijklmnopqrstuv
      # Listeners
      KAFKA_CFG_LISTENERS: PLAINTEXT://:9092,CONTROLLER://:9093
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://:9092
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: PLAINTEXT
    volumes:
      - kafka_1_data:/bitnami/kafka
    networks:
      my-docker-network:

  kafka-2:
    image: bitnami/kafka:3.5
    ports:
      - "9092"
    environment:
      # KRaft settings
      KAFKA_CFG_NODE_ID: 2
      KAFKA_CFG_PROCESS_ROLES: controller,broker
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 0@kafka-0:9093,1@kafka-1:9093,2@kafka-2:9093
      KAFKA_KRAFT_CLUSTER_ID: abcdefghijklmnopqrstuv
      # Listeners
      KAFKA_CFG_LISTENERS: PLAINTEXT://:9092,CONTROLLER://:9093
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://:9092
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: PLAINTEXT
    volumes:
      - kafka_2_data:/bitnami/kafka
    networks:
      my-docker-network:

  transaction-service:
    build: ./transaction-service
    container_name: transaction-service
    image: transaction-service:latest
    depends_on:
      - service-registry
    restart: on-failure
    ports:
      - "5006:5006"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      #_JAVA_OPTIONS: >
      #  -Xdebug
      #  -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5006
    networks:
      my-docker-network:

  bank-account-service:
    build: ./bank-account-service
    container_name: bank-account-service
    image: bank-account-service:latest
    restart: on-failure
    depends_on:
      - service-registry
    ports:
      - "5005:5005"
    environment:
     # _JAVA_OPTIONS: >
     #   -Xdebug
    #    -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005
      SPRING_PROFILES_ACTIVE: docker
    networks:
      my-docker-network:

  transaction-db:
    image: postgres
    restart: on-failure
    ports:
      - "5434:5434"
    environment:
      POSTGRES_USER: showcase-user
      POSTGRES_PASSWORD: showcase-password
      POSTGRES_DB: transaction-db
      PGPORT: 5434
    volumes:
      - transaction_db_data:/var/lib/postgresql/data
    networks:
      my-docker-network:

  bank-account-db:
    image: postgres
    restart: on-failure
    ports:
      - "5433:5433"
    environment:
      POSTGRES_USER: showcase-user
      POSTGRES_PASSWORD: showcase-password
      POSTGRES_DB: bank-account-db
      PGPORT: 5433
    volumes:
      - bank-account-db_data:/var/lib/postgresql/data
    networks:
      my-docker-network:

volumes:
  keycloak_db_volume:
  transaction_db_data:
  bank-account-db_data:
  kafka_0_data:
  kafka_1_data:
  kafka_2_data:
  kafka_magic_config:

networks:
  my-docker-network: